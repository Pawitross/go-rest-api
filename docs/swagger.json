{
    "swagger": "2.0",
    "info": {
        "description": "Documentation of a book managing REST API.\n\n**How to use filtering:**\nTo use simple filtering put name of the column in the query parameter followed by the value.\nExamples: `last_name=Orwell`, `title=Dziady`\nTo filter extended response use filtering like this: `genre.name=Nowela`\n\nTo filter using comparison operators append the operator to the query parameter. Available operators:\n- less than = `.lt`\n- less than or equal = `.lte`\n- greater than = `.gt`\n- greater than or equal = `.gte`\n- equal = `.eq`\n- not equal = `.neq`\n\nExamples: `pages.lt=300`, `year.gte=1980`, `language.name.neq=Polski`.\n\n**How to use sorting:**\nTo sort, use `sort_by` query parameter followed by the column name.\nIf you want to sort in descending order, prefix the column name with a minus sign (`-`).\nExamples: `sort_by=pages` - ascending order, `sort_by=-pages` - descending order\n\n**How to use limit and offset:**\nTo use limit, use the `limit` query parameter, like this: `limit=10`\nTo use offset, you also need to provide a limit.\nThe order of the limit and offset parameters doesn't matter.\nExamples: `offset=10\u0026limit=50`, `limit=50\u0026offset=10`",
        "title": "Book managing API",
        "contact": {}
    },
    "basePath": "/api/v1",
    "paths": {
        "/authors": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with a list of all authors as JSON. Optional filtering, sorting and pagination is available through parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authors"
                ],
                "summary": "Get a list of all authors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Author's first name",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Author's last name",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting by a column",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit returned number of resources",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset returned resources",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Fetched authors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Author"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body to create a new author. Responds with the created author and set `Location` header or an error message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authors"
                ],
                "summary": "Create a new author",
                "parameters": [
                    {
                        "description": "New Author",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - Added new author",
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Path of the newly created author"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/authors/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with the queried author as JSON or an error message.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authors"
                ],
                "summary": "Get one author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Fetched author",
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid author id",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body to update a author. Responds with a status code. When an error occurs the response body contains JSON data with the message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Authors"
                ],
                "summary": "Update an existing author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Existing Author id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Author",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content - Updated the author"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with a status code. When an error occurs the response body contains an error message.",
                "tags": [
                    "Authors"
                ],
                "summary": "Delete an existing author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - Successfully deleted the author"
                    },
                    "400": {
                        "description": "Bad Request - Invalid author id",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body with patch data to a author. Responds with a status code. When an error occurs the response body contains JSON data with the message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Authors"
                ],
                "summary": "Patch an existing author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Existing Author id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patches to the author",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - Successfully patched the author"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with a list of all books as JSON. Optional filtering, sorting and pagination is available through parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get a list of all books",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Book title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Year of publishing of the book",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of pages in the book",
                        "name": "pages",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Author id",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Genre id",
                        "name": "genre",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Language id",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting by a column",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit returned number of resources",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset returned resources",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return extended book information",
                        "name": "extend",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "If extend=true - Author id",
                        "name": "author.id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "If extend=true - Author first name",
                        "name": "author.first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "If extend=true - Author last name",
                        "name": "author.last_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Fetched books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body to create a new book. Responds with the created book and set `Location` header or an error message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book",
                "parameters": [
                    {
                        "description": "New Book",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - Added new book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Path of the newly created book"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with the queried book as JSON or an error message.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get one book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Fetched book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid book id",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body to update a book. Responds with a status code. When an error occurs the response body contains JSON data with the message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Update an existing book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Existing Book id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Book",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content - Updated the book"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Responds with a status code. When an error occurs the response body contains an error message.",
                "tags": [
                    "Books"
                ],
                "summary": "Delete an existing book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - Successfully deleted the book"
                    },
                    "400": {
                        "description": "Bad Request - Invalid book id",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a JSON body with patch data to a book. Responds with a status code. When an error occurs the response body contains JSON data with the message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Patch an existing book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Existing Book id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patches to the book",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - Successfully patched the book"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or JSON",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found -  No resource found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Return a valid JWT token used for authentication and authorization.\nEndpoint requires a JSON request body with a `return_admin_token` boolean field. Setting it to `true` returns an admin access token.",
                "tags": [
                    "Auth"
                ],
                "summary": "Get a JWT token",
                "parameters": [
                    {
                        "description": "Return an admin token",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AdminBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Response body contains JWT token",
                        "schema": {
                            "$ref": "#/definitions/models.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameter value",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to create JWT token",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AdminBody": {
            "type": "object",
            "required": [
                "return_admin_token"
            ],
            "properties": {
                "return_admin_token": {
                    "type": "boolean"
                }
            }
        },
        "models.Author": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "models.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "integer"
                },
                "genre": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "language": {
                    "type": "integer"
                },
                "pages": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Token": {
            "type": "object",
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Provide the JWT token as a Bearer token in the format \"Bearer \u003cyour_token_here\u003e\".\nTo get the token use the /login endpoint with necessary body.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI Specification",
        "url": "https://swagger.io/resources/open-api/"
    }
}