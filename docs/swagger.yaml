definitions:
  models.Book:
    properties:
      author:
        type: integer
      genre:
        type: integer
      id:
        type: integer
      language:
        type: integer
      pages:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.Token:
    properties:
      token:
        type: string
    type: object
info:
  contact: {}
paths:
  /books:
    get:
      description: Responds with a list of all books as JSON. Optional filtering and
        pagination is available through parameters.
      parameters:
      - description: Book id
        in: query
        name: id
        type: string
      - description: Book title
        in: query
        name: title
        type: string
      - description: Year of publishing of the book
        in: query
        name: year
        type: integer
      - description: Number of pages in the book
        in: query
        name: pages
        type: integer
      - description: Author id
        in: query
        name: author
        type: integer
      - description: Genre id
        in: query
        name: genre
        type: integer
      - description: Language id
        in: query
        name: language
        type: integer
      - description: Limit returned number of resources
        in: query
        name: limit
        type: integer
      - description: Offset returned resources
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Fetched books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get a list of all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Accepts a JSON body to create a new book. Responds with the created
        book and set Location header or an error message.
      parameters:
      - description: New Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created - Added new book
          headers:
            Location:
              description: Path of the newly created book
              type: string
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create a new book
      tags:
      - Books
  /books/{id}:
    delete:
      description: Responds with a status code. When an error occurs the response
        body contains an error message.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content - Successfully deleted the book
        "400":
          description: Bad Request - Invalid book id
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete an existing book
      tags:
      - Books
    get:
      description: Responds with the queried book as JSON or an error message.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Fetched book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request - Invalid book id
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get one book
      tags:
      - Books
    patch:
      consumes:
      - application/json
      description: Accepts a JSON body with patch data to a book. Responds with a
        status code. When an error occurs the response body contains JSON data with
        the message.
      parameters:
      - description: Existing Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Patches to the book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      responses:
        "204":
          description: No Content - Successfully patched the book
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found -  No resource found or didn't change resource
          schema:
            $ref: '#/definitions/models.Error'
      summary: Patch an existing book
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Accepts a JSON body to update a book. Responds with a status code.
        When an error occurs the response body contains JSON data with the message.
      parameters:
      - description: Existing Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      responses:
        "204":
          description: Updated the book
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict -  No resource found or didn't change resource
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update an existing book
      tags:
      - Books
  /login:
    get:
      description: Return a valid JWT token used for authentication and authorization.
        Optional boolean admin parameter provides creation of admin access token.
      parameters:
      - description: Return an admin token
        in: query
        name: admin
        type: boolean
      responses:
        "200":
          description: OK - Response body contains JWT token
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request - Invalid parameter value
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error - Failed to create JWT token
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get a JWT token
      tags:
      - Auth
swagger: "2.0"
