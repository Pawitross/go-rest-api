basePath: /api/v1
definitions:
  handler.AdminBody:
    properties:
      return_admin_token:
        type: boolean
    required:
    - return_admin_token
    type: object
  models.Book:
    properties:
      author:
        type: integer
      genre:
        type: integer
      id:
        type: integer
      language:
        type: integer
      pages:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.Token:
    properties:
      admin:
        type: boolean
      token:
        type: string
    type: object
externalDocs:
  description: OpenAPI Specification
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
  description: Documentation of a book managing REST API.
  title: Book managing API
paths:
  /books:
    get:
      description: |-
        Responds with a list of all books as JSON. Optional filtering, sorting and pagination is available through parameters.

        To filter extended response use filtering like this: `genre.name=Nowela`
        To filter using comparison operators append the operator to the query parameter. Available operators:
        - less than = `.lt`
        - less than or equal = `.lte`
        - greater than = `.gt`
        - greater than or equal = `.gte`
        - equal = `.eq`
        - not equal = `.neq`

        Examples: `pages.lt=300`, `year.gte=1980`, `language.name.neq=Polski`.

        To sort, use `sort_by` query parameter followed by the column name.
        If you want to sort in descending order, prefix the column name with a minus sign (`-`).
        Examples: `sort_by=pages` - ascending order, `sort_by=-pages`- descending order
      parameters:
      - description: Book id
        in: query
        name: id
        type: string
      - description: Book title
        in: query
        name: title
        type: string
      - description: Year of publishing of the book
        in: query
        name: year
        type: integer
      - description: Number of pages in the book
        in: query
        name: pages
        type: integer
      - description: Author id
        in: query
        name: author
        type: integer
      - description: Genre id
        in: query
        name: genre
        type: integer
      - description: Language id
        in: query
        name: language
        type: integer
      - description: Sorting by a column
        in: query
        name: sort_by
        type: string
      - description: Limit returned number of resources
        in: query
        name: limit
        type: integer
      - description: Offset returned resources
        in: query
        name: offset
        type: integer
      - description: Return extended book information
        in: query
        name: extend
        type: boolean
      - description: If extend=true - Author id
        in: query
        name: author.id
        type: integer
      - description: If extend=true - Author first name
        in: query
        name: author.first_name
        type: string
      - description: If extend=true - Author last name
        in: query
        name: author.last_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Fetched books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a list of all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Accepts a JSON body to create a new book. Responds with the created
        book and set `Location` header or an error message.
      parameters:
      - description: New Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created - Added new book
          headers:
            Location:
              description: Path of the newly created book
              type: string
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - Books
  /books/{id}:
    delete:
      description: Responds with a status code. When an error occurs the response
        body contains an error message.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content - Successfully deleted the book
        "400":
          description: Bad Request - Invalid book id
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found -  No resource found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing book
      tags:
      - Books
    get:
      description: Responds with the queried book as JSON or an error message.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Fetched book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request - Invalid book id
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found - No resource found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get one book
      tags:
      - Books
    patch:
      consumes:
      - application/json
      description: Accepts a JSON body with patch data to a book. Responds with a
        status code. When an error occurs the response body contains JSON data with
        the message.
      parameters:
      - description: Existing Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Patches to the book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      responses:
        "204":
          description: No Content - Successfully patched the book
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found -  No resource found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Patch an existing book
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Accepts a JSON body to update a book. Responds with a status code.
        When an error occurs the response body contains JSON data with the message.
      parameters:
      - description: Existing Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      responses:
        "204":
          description: No content - Updated the book
        "400":
          description: Bad Request - Invalid input or JSON
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found -  No resource found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing book
      tags:
      - Books
  /login:
    post:
      description: |-
        Return a valid JWT token used for authentication and authorization.
        Endpoint requires a JSON request body with a `return_admin_token` boolean field. Setting it to `true` returns an admin access token.
      parameters:
      - description: Return an admin token
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/handler.AdminBody'
      responses:
        "200":
          description: OK - Response body contains JWT token
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request - Invalid parameter value
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error - Failed to create JWT token
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get a JWT token
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
